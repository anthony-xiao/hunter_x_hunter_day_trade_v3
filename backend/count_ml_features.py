#!/usr/bin/env python3
"""
Script to count the exact number of features generated by ML FeatureEngineering class
"""

import asyncio
import pandas as pd
from datetime import datetime, timedelta
from ml.ml_feature_engineering import FeatureEngineering
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def count_features():
    """Count features generated by ML FeatureEngineering"""
    try:
        # Initialize feature engineering
        db_url = "postgresql://postgres:password@localhost:5432/trading_db"
        feature_engineer = FeatureEngineering(db_url)
        
        # Use recent date range
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)  # 30 days of data
        
        logger.info(f"Generating features for TSLA from {start_date} to {end_date}")
        
        # Generate features
        feature_set = await feature_engineer.engineer_features(
            symbol="TSLA",
            start_date=start_date,
            end_date=end_date,
            include_cross_asset=True
        )
        
        # Count features in each category
        categories = {
            'technical_features': feature_set.technical_features,
            'market_microstructure': feature_set.market_microstructure,
            'sentiment_features': feature_set.sentiment_features,
            'macro_features': feature_set.macro_features,
            'cross_asset_features': feature_set.cross_asset_features,
            'engineered_features': feature_set.engineered_features
        }
        
        total_features = 0
        feature_breakdown = {}
        
        for category, df in categories.items():
            if not df.empty:
                count = len(df.columns)
                feature_breakdown[category] = count
                total_features += count
                logger.info(f"{category}: {count} features")
                logger.info(f"  Columns: {list(df.columns)[:10]}{'...' if len(df.columns) > 10 else ''}")
            else:
                feature_breakdown[category] = 0
                logger.info(f"{category}: 0 features (empty DataFrame)")
        
        logger.info(f"\nTOTAL FEATURES: {total_features}")
        logger.info(f"Expected: 150, Actual: {total_features}, Difference: {150 - total_features}")
        
        # Show detailed breakdown
        print("\n=== FEATURE BREAKDOWN ===")
        for category, count in feature_breakdown.items():
            print(f"{category}: {count}")
        print(f"TOTAL: {total_features}")
        
        return feature_breakdown, total_features
        
    except Exception as e:
        logger.error(f"Failed to count features: {e}")
        return {}, 0

if __name__ == "__main__":
    asyncio.run(count_features())